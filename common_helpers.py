import os
import re
import time
import requests
import json
import logging 


LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.INFO)
GEMINI_API_KEY = os.environ["GOOGLE_GEMINI_API_KEY"]
mood_recommendations_mapping = {
    "HAPPY": "5 good quotes,5 good music, 5 good movies,  5 good book and novels, 5 good jokes, a major recommendation to stay happy",
    "SAD": "5 good quotes,5 good music, 5 good movies, 5 good book and novels, 5 indian mental health organisations, 5 good jokes, a major recommendation to stay happy",
    "FEAR": "5 good quotes,5 good music, 5 good movies, 5 good book and novels, 5 indian mental health organisations, 5 good jokes, a major recommendation to stay strong",
    "ANGRY": "5 good music, 5 good quotes, 5 good book and novels, a major recommendation to stay calm",
    "CONFUSED": "5 good quotes, 5 good music, 5 good book and novels, a major recommendation to stay happy and mindful",
    "CALM": "5 good quotes,5 good music, 5 good movies, 5 good book and novels, 5 good jokes, a major recommendation to stay calm and happy",
    "UNKNOWN": "Easte-Egg that can cheer-up the behaviour",
}

json_structure = {"quotes": [], "movies": [{"title": "", "genre": ""}], "music": [{"artist": "", "song": "", "genre": ""}], "books": [{"title": "", "author": "", "genre": ""}], "jokes": [], "helplines": [], "major_recommendations": ""}
USER_PROMPT = """
I have {mood} mood today

I need recommendations for

{recommendation_list}

The returned format should be in JSON-string format, as I need to parse it for an api.
Do not add any extra comments and this is how the data should be structred as 
{json_structure} and make sure that the response will be easily parsable using the json.loads method.
"""


def format_prompt(prompt, mood="HAPPY"):
    return prompt.format(
        mood=mood, recommendation_list=mood_recommendations_mapping[mood], json_structure=json_structure
    )


def call_gemini_api(prompt):
    """
    Calls the Gemini API and returns the generated response.

    Args:
      prompt: The prompt to be sent to the Gemini API.

    Returns:
      The response generated by the Gemini API.
    """

    print("Generating recommendations for you")
    start = time.time()
    #   prompt = "I have SAD mood today\n\nI need recommendations for\n\n5 good quotes, 5 good music, 5 good movies, 5 good book and novels, 5 indian mental health organisations, 5 good jokes, a major recommendation to stay happy"
    data = {"contents": [{"parts": [{"text": prompt}]}]}  # Wrap prompt in a dictionary
    response = requests.post(
        f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={GEMINI_API_KEY}",
        json=data,
        headers={
            "Content-Type": "application/json",
        },
    )
    end = time.time()
    print(f"Content generated in {end - start} seconds.")   
    return extract_response(response)


def extract_response(response):
    """
    Extracts the response from the Gemini API.

    Args:
      response: The response from the Gemini API.

    Returns:
      The response generated by the Gemini API.
    """
    json_string = json.loads(response.text)["candidates"][0]["content"]["parts"][0]["text"]
    # our response looks like - ```JSON{}```, so we need to extract the main json using regex
    match = re.search(r'```json\n(.*?)\n```', json_string, re.DOTALL)
    if match:
        json_string=match.group(1)
    return json.loads(json_string)